 // This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <thrift/protocol/TBinaryProtocol.h>

#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include "rsg/services.hpp"
#include "client/RsgClientEngine.hpp"
#include "rsg/actor.hpp"
#include "rsg/mailbox.hpp"
#include "rsg/comm.hpp"
#include "rsg/host.hpp"
#include "RsgMsg.hpp"

#include "xbt.h"
#include "simgrid/s4u.h"

#include <iostream>
#include <sys/types.h>
#include <unistd.h>
#include <thread>
#include <inttypes.h>

#include <boost/uuid/uuid.hpp>            // uuid class
#include <boost/uuid/uuid_generators.hpp> // generators
#include <boost/uuid/uuid_io.hpp>         // streaming operators etc.

XBT_LOG_NEW_CATEGORY(RSG_THRIFT_CLIENT, "Remote SimGrid");
XBT_LOG_NEW_DEFAULT_SUBCATEGORY(RSG_THRIFT_REMOTE_CLIENT, RSG_THRIFT_CLIENT , "RSG server (Remote SimGrid)");

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;
using namespace ::RsgService;
using namespace ::simgrid;

#define UNUSED(x) (void)(x)

class PidComp {
  public:
  PidComp(std::string name) : pName(name) {}
  std::string pName;
  int operator()() {
    debug_actor("PidComp:: getting mailbox");
    rsg::Mailbox *mbox = rsg::Mailbox::byName(this->pName.c_str());
    debug_actor("PidComp:: end of getting mailbox");
    debug_actor("PidComp:: recv");
    uint64_t *pid = (uint64_t*) rsg::this_actor::recv(*mbox);
    debug_actor("PidComp:: end of recv");

    std::stringstream ssid;
    ssid << std::this_thread::get_id();
    uint64_t id = std::stoull(ssid.str());
    
    debug_actor("PidComp -> mon pid connu %" PRIu64 " <-> mon pid %" PRIu64 " -> %" PRIu64 "", *pid , id, id - *pid);
    rsg::this_actor::quit();
    debug_actor("J'ai fini XD" );
    return 1;
  }
};


int Spwaner() {
  std::cout << "I am a Spawner thread -> " << std::this_thread::get_id() << std::endl;
  debug_actor("spawner:: getting host");
  rsg::Host host1 = rsg::Host::by_name("host1");
  debug_actor("spawner:: end getting host");

  for(int i = 0; i < 100; i++) {
    std::stringstream ss;
    boost::uuids::uuid uuid = boost::uuids::random_generator()();
    ss << uuid;
    debug_actor("spawner:: getting mb");
    rsg::Mailbox *mbox = rsg::Mailbox::byName(ss.str().c_str());
    debug_actor("spawner:: end getting mb");

    debug_actor("spawner:: creating actor");
    rsg::Actor* actor = rsg::Actor::createActor("hello" , host1 , PidComp(std::string(ss.str())));
    debug_actor("spawner:: end of creating actor");

    std::stringstream ssid;
    ssid << actor->pThreadId;
    uint64_t id = std::stoull(ssid.str());
    
    debug_actor("spawner:: sending");
    rsg::this_actor::send(*mbox, (char*) &(id), sizeof(uint64_t));
    debug_actor("spawner::end of sending");

    std::cout << "Spawner -> sent to mb  " <<  ss.str() <<  std::endl;
    // delete actor;
  }

  printf("I quit tchÃ´ \n");
  rsg::this_actor::quit();
  return 1;
}

int main(int argc, char **argv) {
  // const char *msg = "Do you copy ? ";
  std::cout << "I am a main thread -> " << std::this_thread::get_id() << std::endl;
  rsg::Host host1 = rsg::Host::by_name("host1");

  for(int i = 0; i < 10; i++) {
    rsg::Actor* actor =  rsg::Actor::createActor("spawner" , host1 , Spwaner);
    UNUSED(actor);
//    delete actor;
  }

  rsg::this_actor::sleep(1000);
  rsg::this_actor::quit();
  printf("bye \n");
  return 0; 
}
